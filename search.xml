<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Welcome to Brian的小窝</title>
    <url>/announcement/</url>
    <content><![CDATA[<h1 id="Announcement"><a href="#Announcement" class="headerlink" title="Announcement"></a>Announcement</h1><p>域名 <del>brianwl.top</del> 将于9月5号过期</p>
<p>届时 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmJyaWFud2wudG9wLw==">blog.brianwl.top<i class="fa fa-external-link-alt"></i></span> 将无法访问</p>
<p>以后请使用 <strong><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjZyMTRuLmNvbS8=">blog.6r14n.com<i class="fa fa-external-link-alt"></i></span></strong></p>
<h2 id="作者留下的话"><a href="#作者留下的话" class="headerlink" title="作者留下的话"></a>作者留下的话</h2><p>欢迎来到Brian的小窝，我会这里分享一些使用技巧。<br>请持续关注我的Blog。</p>
]]></content>
      <categories>
        <category>Announcement</category>
      </categories>
      <tags>
        <tag>Announcement</tag>
      </tags>
  </entry>
  <entry>
    <title>创建个人Blog-Hexo</title>
    <url>/create-blog/</url>
    <content><![CDATA[<h1 id="📰静态博客-Hexo"><a href="#📰静态博客-Hexo" class="headerlink" title="📰静态博客-Hexo"></a>📰静态博客-Hexo</h1><hr>
<p>静态博客：是指没有后端数据库的博客，所有文章都是以文件的形式存储，是一种纯前端的博客框架。</p>
<span id="more"></span>

<h2 id="📥本地安装"><a href="#📥本地安装" class="headerlink" title="📥本地安装"></a>📥本地安装</h2><hr>
<h3 id="安装Node-js和git"><a href="#安装Node-js和git" class="headerlink" title="安装Node.js和git"></a>安装Node.js和git</h3><p>因为Hexo是通过Node.js生成的，所以首先需要根据自己的操作系统版本下载并安装Node.js。<br>很多命令既可以用Windows的cmd来完成，也可以使用Git Bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用Git Bash来执行。<br>根据步骤提示进行操作后，在Git Bash（Windows是右键，点击Git Bash，也可以在Visual Studio Code调用Git Bash）中输入命令：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果能正确显示Node.js和git版本，则说明安装成功</span></span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line">git --version </span><br></pre></td></tr></table></figure>

<h3 id="通过npm安装Hexo框架"><a href="#通过npm安装Hexo框架" class="headerlink" title="通过npm安装Hexo框架"></a>通过npm安装Hexo框架</h3><p>Node.js安装成功后，同时会自动安装一个包管理器，称为npm(Node Package Manager)。</p>
<p>输入以下命令来安装Hexo：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli  <span class="comment">#安装</span></span><br><span class="line"></span><br><span class="line">hexo -v                  <span class="comment">#查看hexo版本</span></span><br></pre></td></tr></table></figure>

<h2 id="💡本地使用"><a href="#💡本地使用" class="headerlink" title="💡本地使用"></a>💡本地使用</h2><hr>
<h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>Hexo的所有文章都是以文件的形式存储在目录下的，所以首先需要新建一个目录，在此目录下操作。</p>
<h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init  <span class="comment">#初始化博客</span></span><br></pre></td></tr></table></figure>

<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;BlogName&quot;</span>  <span class="comment">#BlogName是你的文章名称</span></span><br></pre></td></tr></table></figure>

<p>会在 <mark class="label info">source/_posts</mark> 目录下生成BlogName.md文件，可以vim或其他Markdown编辑器进行修改。（推荐使用Visual Studio Code）</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93aGF0c2lkLm1lLzIwMTkvMDgvMjEvaGV4by1tYXJrZG93bi1zeW50YXgv">Markdown 语法教程<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="生成博客静态文件"><a href="#生成博客静态文件" class="headerlink" title="生成博客静态文件"></a>生成博客静态文件</h3><p>每次修改文章后，都需要通过<code>hexo clean</code>清理一下，然后通过<code>hexo g</code>重新生成，最后也不要忘了通过<code>hexo s</code>重新启动Hexo。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean  <span class="comment">#清理</span></span><br><span class="line"></span><br><span class="line">hexo g      <span class="comment">#g代表generate，生成博客静态文件</span></span><br><span class="line"></span><br><span class="line">hexo s      <span class="comment">#测试Blog显示是不是正常，通常访问地址是http://localhost:4000/，如果4000端口不可用，需要换一个</span></span><br></pre></td></tr></table></figure>

<h3 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h3>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s  <span class="comment">#s代表server，默认端口号是4000</span></span><br></pre></td></tr></table></figure>

<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>将需要更换的主题下载并解压缩到 <mark class="label info">theme/themeName</mark> 目录下，themeName是你给主题取的名字，如果我用的主题是NexT，只需要解压缩到 <mark class="label info">Hexo/themes/next</mark> 目录下即可,当然你也可以直接在hexo目录下执行。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>解压完成后，修改 <mark class="label info">_config.yaml</mark> 文件中的theme属性，默认是landscape，修改为next。</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span>  <span class="comment">#注意：“theme:”后要带一个空格</span></span><br></pre></td></tr></table></figure>

<h3 id="其他-config-yaml配置"><a href="#其他-config-yaml配置" class="headerlink" title="其他_config.yaml配置"></a>其他_config.yaml配置</h3><p>_config.yaml文件是Hexo项目的全局配置文件，常用的属性有：</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="comment"># 站点标题</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">username&#x27;s</span> <span class="string">Blog</span></span><br><span class="line"><span class="comment"># 站点副标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 站点描述</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">JUST</span> <span class="string">FOR</span> <span class="string">FUN</span></span><br><span class="line"><span class="comment"># 作者</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">username</span></span><br><span class="line"><span class="comment"># 语言——  请注意，官方语言包不再支持简体中文zh-Hans，而是统一采用了zh-CN</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="comment"># 时区——默认是本地时区</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment"># 站点地址</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://example.com</span></span><br><span class="line"><span class="comment"># 生成固定链接的格式</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#插入文件需要打开</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment"># 每页文章数——关闭分页：0</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment"># 主题</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment"># 部署配置</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span> <span class="comment">#username是你Github的用户名</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<p>每次修改文章后，都需要通过<code>hexo clean</code>清理一下，然后通过<code>hexo g</code>重新生成，最后也不要忘了通过<code>hexo s</code>重新启动Hexo。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean  <span class="comment">#清理</span></span><br><span class="line"></span><br><span class="line">hexo g      <span class="comment">#g代表generate，生成博客静态文件</span></span><br><span class="line"></span><br><span class="line">hexo s      <span class="comment">#测试Blog显示是不是正常，通常访问地址是http://localhost:4000/，如果4000端口不可用，检查端口是否被占用</span></span><br></pre></td></tr></table></figure>

<h2 id="⚙️配置SSH免密登录"><a href="#⚙️配置SSH免密登录" class="headerlink" title="⚙️配置SSH免密登录"></a>⚙️配置SSH免密登录</h2><hr>
<p>为什么要配置这个呢？<br>因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。<br>操作步骤：</p>
<p>第一、首先打开电脑文件夹，找到 <mark class="label info">C:\Users\username\.ssh</mark> 文件夹并删除。</p>
<p>第二、在 <mark class="label info">C:\Users\username</mark> 文件夹下右键打开Git Bash Here输入命令：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C github邮件地址  <span class="comment">#github邮件地址是注册Github用的邮箱地址</span></span><br></pre></td></tr></table></figure>

<p>生成.ssh秘钥，输入后连敲三次回车。</p>
<p>第三、最终生成了一个新的 <mark class="label info">C:\Users\username\.ssh</mark> 文件夹，打开这个文件夹，找到 <mark class="label info">.ssh\id_rsa.pub</mark> 文件，记事本打开并复制里面的内容。</p>
<p>第四、打开你的github主页，进入个人设置<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL2tleXM=">SSH and GPG keys<i class="fa fa-external-link-alt"></i></span>，点击New SSH key，把复制的内容粘贴进去，title随便填，保存即可，我们的公钥就添加成功了，设置好如下图：<br><img data-src="/create-blog/ssh.png" alt="SSH and GPG keys" title="SSH and GPG keys"></p>
<p>第五、检测是否设置成功。</p>
<p>输入命令:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com  <span class="comment">#注意邮箱地址不用改</span></span><br></pre></td></tr></table></figure>

<p>如果提示Are you sure you want to continue connecting (yes&#x2F;no)?，输入<code>yes</code>，然后会看到：</p>
  <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Hi XXX! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>看到这个信息说明SSH已配置成功！</p>
<p>第六、此时你还需要配置：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name   <span class="comment">#&quot;username&quot; 你的github用户名，非昵称</span></span><br><span class="line">    </span><br><span class="line">git config --global user.email  <span class="comment">#&quot;xxx@gmail.com&quot; 填写你的github注册邮箱</span></span><br></pre></td></tr></table></figure>

<h2 id="⚙️Github服务器部署"><a href="#⚙️Github服务器部署" class="headerlink" title="⚙️Github服务器部署"></a>⚙️Github服务器部署</h2><hr>
<p>第一、本地+github.io白嫖部署。</p>
<p>首先注册并登录<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25ldw==">GitHub<i class="fa fa-external-link-alt"></i></span>，创建新public仓库，仓库名称一定要是：<mark class="label info">username.github.io！</mark> (username是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL2FkbWlu">你的GitHub用户名<i class="fa fa-external-link-alt"></i></span>，<mark class="label danger">注意大小写！</mark> )</p>
<p>第二、本地安装Hexo的git部署插件。</p>
<p>在Hexo的目录下，输入：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>完成此命令后，可能会报一个peerDependencies WARNING，可以忽略。</p>
<p>第三、本地修改_config.yaml文件。</p>
<p>在Hexo目录下，找到 <mark class="label info">_config.yaml</mark> 文件，在#Deployment做如下修改：</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<p>第四、部署，使用以下命令：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>  部署成功后，浏览器输入username.github.io(username是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL2FkbWlu">你的GitHub用户名<i class="fa fa-external-link-alt"></i></span>，<mark class="label danger">注意大小写！</mark> )</p>
<h2 id="⚙️Cloudflare部署"><a href="#⚙️Cloudflare部署" class="headerlink" title="⚙️Cloudflare部署"></a>⚙️Cloudflare部署</h2><hr>
<p>使用Cloudflare Page部署。</p>
<p>第一、关联Github账号。<br><img data-src="/create-blog/cloudflare-pages-github-config.png" alt="关联Github账号" title="关联Github账号"></p>
<p>第二、授权完后，就能在Cloudflare Pages上选择对应的仓库了。<br><img data-src="/create-blog/pickRepository.png" alt="选择仓库" title="选择仓库"></p>
<p>第一、设置Builds，Production branch默认为main，主要看你自己一开始设置的分支，<mark class="label danger">注意Build settings全部为空白</mark> 。<br><img data-src="/create-blog/setupbuild.png" alt="设置Builds" title="设置Builds"></p>
<p>第四、等待部署。</p>
<p>第五、自定义域名。<br><img data-src="/create-blog/customdomian.png" alt="填写域名" title="填写域名"></p>
<h2 id="⚙️Next主题配置"><a href="#⚙️Next主题配置" class="headerlink" title="⚙️Next主题配置"></a>⚙️Next主题配置</h2><hr>
<p>主题官网有详细的配置介绍：<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzL3RoZW1lLXNldHRpbmdzLw==">官网配置说明<i class="fa fa-external-link-alt"></i></span>。</p>
<hr>
<p>Authored by Brian</p>
]]></content>
      <categories>
        <category>Web</category>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>域名购买、域名解析</title>
    <url>/domain/</url>
    <content><![CDATA[<h1 id="🔗Namesilo"><a href="#🔗Namesilo" class="headerlink" title="🔗Namesilo"></a>🔗Namesilo</h1><hr>
<p>Namesilo是国外最大的ICANN认证域名提供商之一，以物美价廉的优势积累了不错的口碑。费用方面，其域名注册费用相较国内来说便宜不少。</p>
<span id="more"></span>

<p>拿阿里云万网对比：</p>
<mark class="label info">.com</mark> 的域名，万网的注册费用是69元首年，续费79元每年；

<p>Namesilo是$10.95，按7的汇率，也就是￥77每年，续费价格不变，续费价格不变！！续费价格不变！！！</p>
<p>而且第一次注册还可以使用优惠码（优惠码及使用方法在下文），降低1美元。也就是说可降至70元。(之前我有买 <mark class="label info">.top</mark> 的域名，首付只要$1.88，第二年付费需$4.88，很香)</p>
<p>而且，Namesilo的注册购买也很方便。在国内域名商注册使用域名需要各种实名认证，比如万网，账户和域名都要单独各认证一次，比较麻烦。</p>
<p>而Namesilo完全没有这些步骤，直接注册购买了就能使用，不用那么麻烦。</p>
<p>namesilo不仅价格优势明显，更重要的是：</p>
<ol>
<li><p>没有隐藏费用，续订费用不会增加。</p>
</li>
<li><p>终身免费的WHOIS Guard。</p>
</li>
<li><p>后台管理方便。</p>
</li>
<li><p>高级别的安全防护，保护你的域名。</p>
</li>
<li><p>免费域名停放服务。</p>
</li>
<li><p>可以使用支付宝付款，甚至还可以使用比特币。</p>
</li>
</ol>
<p>唯一要吐槽的就是页面的风格像是10年前的，好老，不过最近他们有计划更新了官网首页，后台还是很古老的界面…</p>
<p>下面来讲一下，如何在Namesilo注册购买域名。</p>
<h2 id="❓如何使用Namesilo优惠码购买域名？"><a href="#❓如何使用Namesilo优惠码购买域名？" class="headerlink" title="❓如何使用Namesilo优惠码购买域名？"></a>❓如何使用Namesilo优惠码购买域名？</h2><hr>
<ol>
<li><p>首先访问<span class="exturl" data-url="aHR0cHM6Ly93d3cubmFtZXNpbG8uY29tLw==">namesilo官网<i class="fa fa-external-link-alt"></i></span>，如下图所示。<br><img data-src="/domain/namesilo.png" alt="namesilo" title="namesilo"></p>
</li>
<li><p>输入你想购买的域名，蓝色是还能注册，橙色是已被人注册不能再注册，选好后点蓝色按钮。<br><img data-src="/domain/choosedomain.png" alt="选择域名" title="选择域名"></p>
</li>
<li><p>接下来会有一个Premium DNS的购买选项，我自己的几个域名都没有购买，直接选的No, I don’t want to protect my domain。</p>
</li>
<li><p><del>输入namesilo优惠码： <mark class="label info">?</mark> ,可以优惠1美元。需要注意的是，同一账号多次购买域名，优惠码会无效。</del></p>
</li>
<li><p>接下来填写账号信息，填个大概就行，只用填带星号的，邮箱请用常用邮箱。</p>
</li>
<li><p>选择支付宝付款，支付宝那里的邮箱是指你的联系邮箱，随便填一个你常用的邮箱就可以了。</p>
</li>
<li><p>购买成功后，你会收到官方发来的邮件。</p>
</li>
</ol>
<h2 id="💡Namesilo域名解析教程"><a href="#💡Namesilo域名解析教程" class="headerlink" title="💡Namesilo域名解析教程"></a>💡Namesilo域名解析教程</h2><hr>
<p>域名购买完，如果你想自己建个网站，接下来有两件事情要做。</p>
<ul>
<li>购买主机</li>
<li>域名解析</li>
</ul>
<h3 id="购买主机"><a href="#购买主机" class="headerlink" title="购买主机"></a>购买主机</h3><p>国内服务器最大的优势就是延迟比较低，不过需要备案，而且后续价格会贵一点。</p>
<p>国外主机的优点是不用备案，但是访问的延迟会高一些。</p>
<h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>首先登陆namesilo账号，右上角点Manage My Domains，<br><img data-src="/domain/ManageMyDomains.webp" alt="Manage My Domains" title="Manage My Domains"></p>
<p>然后点下图标记的蓝色圆球。<br><img data-src="/domain/domainmanger.webp" alt="域名管理" title="域名管理"></p>
<p>下图里的记录是namesilo的默认记录，全部删除就行，后面我们再来添加新的A记录。<br><img data-src="/domain/managerdns.webp" alt="DNS管理" title="DNS管理"></p>
<p>新加一条 <mark class="label info">A</mark> 记录， <mark class="label info">TTL</mark> 用默认的就行，如下图所示。<br><img data-src="/domain/addhostname.webp" alt="增加HOSTNAME" title="增加HOSTNAME"></p>
<p>然后再新加一条 <mark class="label info">A</mark> 记录， <mark class="label info">HOSTNAME</mark> 填你随意想填写的内容，IP地址还是填服务器的公网IP地址。</p>
<p>这边的话就是二级域名的概念了。</p>
<p>假定你注册的域名是 <mark class="label info">google.com</mark> ,这里HOSTNAME你填了 <mark class="label info">blog</mark> ，那就表示， <mark class="label info">blog.google.com</mark> 这个二级域名解析到了你服务器上。</p>
<p>你的一级域名是 <mark class="label info">google.com</mark> 。</p>
<h2 id="⭐总结"><a href="#⭐总结" class="headerlink" title="⭐总结"></a>⭐总结</h2><hr>
<p>刚开始注册购买域名，可能对域名费用不太在乎。</p>
<p>但当你注册的域名越来越多时，你会发现域名费用也是一大笔钱。所以我们要选一家性价比最高的域名注册商。国外的话，Namesilo就是最佳选择。</p>
<p>Namesilo域名价格全网最低，使用简单，安全级别高，后台管理方便，还有优惠码和免费的域名隐私保护，无论是新注册域名，还是域名续费都很划算。</p>
<p>服务器的话，如果准备长期使用，而且网站访问的用户主要是国内人群，还是建议弄一台腾讯云或者阿里云的服务器，老老实实走备案，更稳定一些，当然你得发布健康的内容，不然查你水表，请你喝茶。</p>
<p>买的服务如果不是大陆的话，就不用备案了，但也不要为所欲为，毕竟人还在国内，真要查你一样能找到你。怎么说呢，相对自由一些吧。</p>
<hr>
<p>Source:<br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmxhb2RhLmRlL2FyY2hpdmVzL25hbWVzaWxvLw==">【服务器、域名购买】Namesilo 优惠码和域名解析教程（附带服务器购买推荐和注意事项）<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Web</category>
        <category>Domian</category>
        <category>Namesilo</category>
      </categories>
      <tags>
        <tag>Domian</tag>
      </tags>
  </entry>
  <entry>
    <title>HELLO WORLD</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>🌎🌍🌏<br>Hello World.<br>This is a test page for blog.<br>你好，世界。<br>这是用于测试Blog的页面。</p>
<span id="more"></span>

<hr>
<p>Authored by Brian</p>
]]></content>
      <categories>
        <category>hello world</category>
      </categories>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Nginx Proxy Manager</title>
    <url>/installNPM/</url>
    <content><![CDATA[<h1 id="Nginx-Proxy-Manager"><a href="#Nginx-Proxy-Manager" class="headerlink" title="Nginx Proxy Manager"></a>Nginx Proxy Manager</h1><hr>
<p>Nginx proxy manager是一个很简单的反向代理工具。</p>
<p>官网：<span class="exturl" data-url="aHR0cHM6Ly9uZ2lueHByb3h5bWFuYWdlci5jb20v">https://nginxproxymanager.com/<i class="fa fa-external-link-alt"></i></span></p>
<p>门槛极低，操作简单，不需要你掌握很复杂的Nginx配置知识，只需要几步就能很轻松完成反向代理的设置和SSL证书的部署。</p>
<span id="more"></span>

<h2 id="⚙️开始部署"><a href="#⚙️开始部署" class="headerlink" title="⚙️开始部署"></a>⚙️开始部署</h2><hr>
<p>服务器环境：Debian 10（Ubuntu 20.04也可以）或以上版本</p>
<h3 id="登陆服务器"><a href="#登陆服务器" class="headerlink" title="登陆服务器"></a>登陆服务器</h3><p>选择一款连接SSH的软件。</p>
<p>Mac 或者 Linux 用户可以直接用系统自带的 <mark class="label info">终端</mark> （也叫 <mark class="label info">Terminal</mark> ）来登陆服务器。</p>
<p>输入：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh 你的用户名@你的服务器IP -P 22</span><br></pre></td></tr></table></figure>

<p>如果你没有更改 ssh 的端口，默认就是 <mark class="label info">22</mark> ，当然为了服务器安全，建议你可以换一个别的端口。</p>
<h3 id="添加SWAP虚拟内存"><a href="#添加SWAP虚拟内存" class="headerlink" title="添加SWAP虚拟内存"></a>添加SWAP虚拟内存</h3><div class="note default"><p>注意：VPS 的内存如果过小，建议设置一下 SWAP，一般为内存的 1-1.5 倍即可，可以让系统运行更流畅！</p>
</div>

<p>设置 SWAP 可以用脚本:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O box.sh &lt;https://raw.githubusercontent.com/BlueSkyXN/SKY-BOX/main/box.sh&gt; &amp;&amp; <span class="built_in">chmod</span> +x box.sh &amp;&amp; clear &amp;&amp; ./box.sh</span><br></pre></td></tr></table></figure>

<p><img data-src="/installNPM/choose18.webp" alt="选择第18个选项" title="选择第18个选项"></p>
<p>输入 <code>18</code>，然后输入你想要扩容的数值即可。</p>
<p><img data-src="/installNPM/change.webp" alt="输入扩容的数值" title="输入扩容的数值"></p>
<h3 id="⬆️升级-packages"><a href="#⬆️升级-packages" class="headerlink" title="⬆️升级 packages"></a>⬆️升级 packages</h3><p>逐条执行以下命令即可：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i <span class="comment"># 切换到 root 用户</span></span><br><span class="line"></span><br><span class="line">apt update -y  <span class="comment"># 升级 packages</span></span><br><span class="line"></span><br><span class="line">apt install wget curl sudo vim git -y  <span class="comment"># Debian 系统比较干净，安装常用的软件</span></span><br></pre></td></tr></table></figure>

<h3 id="📥安装-Docker-环境"><a href="#📥安装-Docker-环境" class="headerlink" title="📥安装 Docker 环境"></a>📥安装 Docker 环境</h3><p>第一、安装 Docker（非大陆服务器）：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO- get.docker.com | bash</span><br><span class="line"></span><br><span class="line">docker -v  <span class="comment">#查看 docker 版本</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> docker  <span class="comment"># 设置开机自动启动</span></span><br></pre></td></tr></table></figure>

<p>第二、安装 Docker-compose（非大陆服务器）：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">docker-compose --version  <span class="comment">#查看 docker-compose 版本</span></span><br></pre></td></tr></table></figure>

<p>第三、安装 Docker（国内服务器）：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class="line"></span><br><span class="line">docker -v  <span class="comment">#查看 docker 版本</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> docker  <span class="comment"># 设置开机自动启动</span></span><br></pre></td></tr></table></figure>

<p>第四、安装 Docker-compose（国内服务器）：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/v2.1.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">docker-compose --version  <span class="comment">#查看 docker-compose 版本</span></span><br></pre></td></tr></table></figure>

<p>第五、修改 Docker 配置（可选）</p>
<p>以下配置会增加一段自定义内网 IPv6 地址，开启容器的 IPv6 功能，以及限制日志文件大小，防止 Docker 日志塞满硬盘（泪的教训）：</p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;log-driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-file&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;log-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;max-size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20m&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max-file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ipv6&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;fixed-cidr-v6&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fd00:dead:beef:c0::/80&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;experimental&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ip6tables&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>然后重启 Docker 服务：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="📥安装-Nginx-Proxy-Manager"><a href="#📥安装-Nginx-Proxy-Manager" class="headerlink" title="📥安装 Nginx Proxy Manager"></a>📥安装 Nginx Proxy Manager</h3><p>第一、创建安装目录</p>
<p>创建一下安装的目录：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/npm</span><br><span class="line">        </span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm</span><br></pre></td></tr></table></figure>

<p>这边我们直接用 docker 的方式安装：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure>

<p>英文输入法下，按 <code>i</code>：</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">app:</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">&#x27;jc21/nginx-proxy-manager:latest&#x27;</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span>  <span class="comment"># 冒号左边可以改成自己服务器未被占用的端口</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&#x27;81:81&#x27;</span>  <span class="comment"># 冒号左边可以改成自己服务器未被占用的端口</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span> <span class="comment"># 冒号左边可以改成自己服务器未被占用的端口</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">./data:/data</span> <span class="comment"># 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 data 文件夹中</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">./letsencrypt:/etc/letsencrypt</span>  <span class="comment"># 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 letsencrypt 文件夹中</span></span><br></pre></td></tr></table></figure>

<p>按一下 <code>esc</code>，然后 :<code>wq</code> 保存退出，之后，</p>
<p>第二、打开服务器防火墙并访问网页（非必需）</p>
<p>打开防火墙的端口 <mark class="label info">81</mark></p>
<p>查看端口是否被占用，输入：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:81  <span class="comment">#查看81端口是否被占用，如果被占用，重新自定义一个端口</span></span><br></pre></td></tr></table></figure>

<p>如果出现：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash: lsof: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure>

<p>运行：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install lsof  <span class="comment">#安装lsof</span></span><br></pre></td></tr></table></figure>

<p>如果端口没有被占用，可以运行：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>如果端口没有被占用（被占用了就修改一下端口，比如改成 <mark class="label info">82</mark> ，注意 docker 命令行里和防火墙都要改）</p>
<p>第三、运行并访问 Nginx Proxy Manager</p>
<p>最后：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm   <span class="comment"># 来到 dockercompose 文件所在的文件夹下</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure>

<p>理论上我们就可以输入 <mark class="label info"><http://ip:81></mark> 访问了。</p>
<p>默认登陆名和密码：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Email:    admin@example.com</span><br><span class="line">Password: changeme</span><br></pre></td></tr></table></figure>

<h3 id="⬆️更新-Nginx-Proxy-Manager"><a href="#⬆️更新-Nginx-Proxy-Manager" class="headerlink" title="⬆️更新 Nginx Proxy Manager"></a>⬆️更新 Nginx Proxy Manager</h3><p>逐条执行以下命令即可：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/npm /root/data/docker_data/npm.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure>

<p>提示：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N]</span><br></pre></td></tr></table></figure>

<p>输入 <code>y</code></p>
<h3 id="❌卸载-Nginx-Proxy-Manager"><a href="#❌卸载-Nginx-Proxy-Manager" class="headerlink" title="❌卸载 Nginx Proxy Manager"></a>❌卸载 Nginx Proxy Manager</h3><p>逐条执行以下命令即可：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/npm  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure>

<p>可以卸载得很干净。</p>
<h2 id="⭐最后"><a href="#⭐最后" class="headerlink" title="⭐最后"></a>⭐最后</h2><hr>
<p>NPM的功能还有很多，预计还有两期，一期讲泛域名证书的配置，一期讲安全防护，这次只是简单介绍一下，大家可以发挥钻研精神，自己先研究研究。</p>
<p>有了NPM，可以统一管理，的确方便了很多，但总觉得还缺少点什么？有没有类似NPM这种有UI界面的工具，可以让我们直观地看到Docker的容器呢？Docker容器如果也可以统一管理，查看状态就很棒，别急，下期给大家带来！</p>
<hr>
<p>Source:<br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmxhb2RhLmRlL2FyY2hpdmVzL25naW54cHJveHltYW5hZ2VyLw==">【Docker 系列】一个反向代理神器 ——Nginx Proxy Manager<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Web</category>
        <category>Npm</category>
        <category>Install</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>自建阅读WEB版-Reader</title>
    <url>/reader/</url>
    <content><![CDATA[<h1 id="📖Reader"><a href="#📖Reader" class="headerlink" title="📖Reader"></a>📖Reader</h1><hr>
<p>阅读3服务器版，不需要手机。</p>
<span id="more"></span>

<h2 id="💡教程"><a href="#💡教程" class="headerlink" title="💡教程"></a>💡教程</h2><hr>
<ol>
<li><p>Reader Web版来自Github的项目<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlY3RvcnFpbi9yZWFkZXI=">hectorqin&#x2F;reader<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><mark class="label success">推荐可使用AWS或者AZ</mark>
<p> ✅自备服务器建站教程（推荐使用Microsoft Azure）：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmxhb2RhLmRlL2FyY2hpdmVzL2RvY2tlci1jb21wb3NlLWluc3RhbGwtcmVhZGVy">【好玩儿的Docker项目】 10分钟搭建一个自己的网文阅读器 安卓的“阅读”APP网页版 附带书源！-咕咕鸽<i class="fa fa-external-link-alt"></i></span></p>
<p> ✅<a href="../readerdeploy">备份教程</a></p>
</li>
<li><mark class="label danger">并不推荐以下方法</mark>
<p> <del>❌免费docker服务器建站教程<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBNU5qRXdOakUwT1E9PSZtaWQ9MjI0NzUwNzY0NSZpZHg9MSZzbj04NWRlZGFjMDAyZTEzZWJkOTRmZDEzOThkYzg4MTBjOSZjaGtzbT05MGI3YmQ3N2E3YzAzNDYxNWMxMjJiYzI5NTI2NmMyYzRhYjJmZjFhYWY5YzNmOWEzODViMzgyZTBmNWE4MmE5NjdjYjI2Y2RmYTE5JmN1cl9hbGJ1bV9pZD0xNTIzNzE3OTAxMzAyNzEwMjczJnNjZW5lPTIxI3dlY2hhdF9yZWRpcmVjdA==">这款最强网文神器竟然出网页版了！！5分钟教你完全免费搭建一个 - 阿虚同学<i class="fa fa-external-link-alt"></i></span></del></p>
<div class="note info"><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>Koyeb建站会不定时重置<br>Railway每个月有500小时的时间限制</p>
</div>
</li>
<li><p>阅读书源：<span class="exturl" data-url="aHR0cHM6Ly95dWVkdS54aXUyLnh5ei8=">点击这里 每月更新<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ol>
<h2 id="🖼️样例"><a href="#🖼️样例" class="headerlink" title="🖼️样例"></a>🖼️样例</h2><hr>
<ul>
<li><p>样例链接：<span class="exturl" data-url="aHR0cHM6Ly9yZWFkZXIuaHRtYWtlLmNvbS8=">点击这里<i class="fa fa-external-link-alt"></i></span></p>
<p>  阅读WEB样例: <img data-src="/reader/reader.png" alt="阅读WEB样例" title="阅读WEB样例"></p>
</li>
</ul>
<hr>
<p>Authored by Brian</p>
]]></content>
      <categories>
        <category>Book</category>
        <category>Reader</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>自建阅读WEB版教程</title>
    <url>/readerdeploy/</url>
    <content><![CDATA[<h1 id="📖Reader教程"><a href="#📖Reader教程" class="headerlink" title="📖Reader教程"></a>📖Reader教程</h1><hr>
<p>安卓手机APP<code>阅读3</code>服务器版，桌面端。<br>后端 <code>Kotlin</code> + <code>Spring Boot</code> + <code>Vert.x</code> + <code>Coroutine</code> ；<br>前端 <code>Vue.js</code> + <code>Element</code>。<br>GitHub 开源项目，支持Docker搭建。</p>
<span id="more"></span>

<div class="note warning"><h2 id="切记"><a href="#切记" class="headerlink" title="切记"></a>切记</h2><p><strong>以下服务器和域名均在海外搭建以及购买</strong><br><strong>如果在中国大陆搭建，请遵守当地法律并进行备案</strong></p>
</div>

<h2 id="❓搭建环境"><a href="#❓搭建环境" class="headerlink" title="❓搭建环境"></a>❓搭建环境</h2><hr>
<div class="note default"><ul>
<li><p>服务器，按小时计费，可随时销毁（最好是选非大陆的服务器）</p>
</li>
<li><p>系统：Debian 10</p>
</li>
<li><p>域名一枚，并做好解析到服务器上</p>
</li>
<li><p>安装好Docker、Docker-compose</p>
</li>
</ul>
</div>

<h2 id="⚙️搭建方式"><a href="#⚙️搭建方式" class="headerlink" title="⚙️搭建方式"></a>⚙️搭建方式</h2><hr>
<h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><p>服务器初始设置，参考：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i <span class="comment"># 切换到root用户</span></span><br><span class="line"></span><br><span class="line">apt update -y  <span class="comment"># 升级packages</span></span><br><span class="line"></span><br><span class="line">apt install wget curl sudo vim git  <span class="comment"># Debian系统比较干净，安装常用的软件</span></span><br></pre></td></tr></table></figure>

<p>创建一下安装的目录：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p data/docker_data/reader</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> data/docker_data/reader</span><br><span class="line"></span><br><span class="line">nano docker-compose.yml</span><br></pre></td></tr></table></figure>

<mark class="label info">docker-compose.yml</mark> 内容如下：

  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reader 在线阅读</span></span><br><span class="line"><span class="comment"># 书源参考 : https://github.com/NZESupB/ReadSource,书源合集下选一个合集进入网页后, Ctrl+S 保存至本地后导入网站即可,或者点击远程书源,将链接导入即可</span></span><br><span class="line"><span class="comment">#docker run -d --restart=always --name=reader -e &quot;SPRING_PROFILES_ACTIVE=prod&quot; -v $(pwd)/logs:/logs -v $(pwd)/storage:/storage -p 8080:8080 hectorqin/reader</span></span><br><span class="line"><span class="comment"># 多用户版</span></span><br><span class="line"><span class="comment">#docker run -d --restart=always --name=reader -v $(pwd)/logs:/logs -v $(pwd)/storage:/storage -p 8080:8080 hectorqin/reader java -jar /app/bin/reader.jar --spring.profiles.active=prod --reader.app.secure=true --reader.app.secureKey=管理密码 --reader.app.inviteCode=注册邀请码</span></span><br><span class="line"><span class="comment"># 多用户版 使用环境变量</span></span><br><span class="line"><span class="comment">#docker run -d --restart=always --name=reader -e &quot;SPRING_PROFILES_ACTIVE=prod&quot; -e &quot;READER_APP_SECURE=true&quot; -e &quot;READER_APP_SECUREKEY=管理密码&quot; -e &quot;READER_APP_INVITECODE=注册邀请码&quot; -v $(pwd)/logs:/logs -v $(pwd)/storage:/storage -p 8080:8080 hectorqin/reader</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自用版</span></span><br><span class="line"><span class="comment">#  read_own:</span></span><br><span class="line"><span class="comment">#    image: hectorqin/reader</span></span><br><span class="line"><span class="comment">#    container_name: reader_own</span></span><br><span class="line"><span class="comment">#    restart: always</span></span><br><span class="line"><span class="comment">#    ports:</span></span><br><span class="line"><span class="comment">#      - 4395:8080</span></span><br><span class="line"><span class="comment">#    volumes:</span></span><br><span class="line"><span class="comment">#      - /home/reader/logs:/logs</span></span><br><span class="line"><span class="comment">#      - /home/reader/storage:/storage</span></span><br><span class="line"><span class="comment">#    environment:</span></span><br><span class="line"><span class="comment">#      - SPRING_PROFILES_ACTIVE=prod</span></span><br><span class="line"><span class="comment">#      - READER_APP_CACHECHAPTERCONTENT=true #是否开启缓存章节内容 V2.0</span></span><br><span class="line"><span class="comment"># 多用户版</span></span><br><span class="line"><span class="attr">read_all:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hectorqin/reader</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">reader</span> <span class="comment">#容器名 可自行修改</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">4396</span><span class="string">:8080</span> <span class="comment">#4396端口映射可自行修改</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/root/data/docker_data/reader/logs:/logs</span> <span class="comment">#log映射目录 /root/data/docker_data/reader/logs 映射目录可自行修改</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/root/data/docker_data/reader/storage:/storage</span> <span class="comment">#数据映射目录 /root/data/docker_data/reader/storage 映射目录可自行修改</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SPRING_PROFILES_ACTIVE=prod</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">READER_APP_SECURE=true</span> <span class="comment">#开启登录鉴权，开启后将支持多用户模式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">READER_APP_CACHECHAPTERCONTENT=true</span> <span class="comment">#是否开启缓存章节内容 V2.0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">READER_APP_SECUREKEY=adminpwd</span>  <span class="comment">#管理员密码  可自行修改</span></span><br><span class="line">    <span class="comment">#- READER_APP_INVITECODE=registercode #注册邀请码,如需要取消注释 可自行修改</span></span><br><span class="line">    <span class="comment"># 自动更新docker</span></span><br><span class="line"><span class="attr">watchtower:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">containrrr/watchtower</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">watchtower</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="comment"># 环境变量,设置为上海时区</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">reader</span> <span class="string">watchtower</span> <span class="string">--cleanup</span> <span class="string">--schedule</span> <span class="string">&quot;0 0 4 * * *&quot;</span></span><br><span class="line">    <span class="comment"># 仅更新reader与watchtower容器,如需其他自行添加 &#x27;容器名&#x27; ,如:reader watchtower redis</span></span><br><span class="line">    <span class="comment"># --cleanup 更新后清理旧版本镜像</span></span><br><span class="line">    <span class="comment"># --schedule 自动检测更新 crontab定时(限定6位crontab) 此处代表凌晨4点整</span></span><br></pre></td></tr></table></figure>

<p>没问题的话，<mark class="label info">docker-compose.yml</mark> 退出，按<code>y</code>保存，<code>enter</code>确认。</p>
<p>查看端口是否被占用，输入：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:4396  <span class="comment">#查看4396端口是否被占用，如果被占用，重新自定义一个端口</span></span><br></pre></td></tr></table></figure>

<p>如果出现：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash: lsof: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure>

<p>运行：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install lsof  <span class="comment">#安装lsof</span></span><br></pre></td></tr></table></figure>

<p>如果端口没有被占用，可以运行：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>访问： <mark class="label info">http:ip:4396</mark> 即可。</p>
<h3 id="⬆️更新"><a href="#⬆️更新" class="headerlink" title="⬆️更新"></a>⬆️更新</h3>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/reader  <span class="comment"># 进入docker-compose所在的文件夹</span></span><br><span class="line"></span><br><span class="line">docker-compose pull    <span class="comment"># 拉取最新的镜像</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d   <span class="comment"># 重新更新当前镜像</span></span><br></pre></td></tr></table></figure>

<p>利用Docker-compose搭建的应用，更新非常容易</p>
<h3 id="❌卸载"><a href="#❌卸载" class="headerlink" title="❌卸载"></a>❌卸载</h3>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i  <span class="comment"># 切换到root</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/reader  <span class="comment"># 进入docker-compose所在的文件夹</span></span><br><span class="line"></span><br><span class="line">docker-compose down    <span class="comment"># 停止容器，此时不会删除映射到本地的数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">    </span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/reader  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure>

<p>利用Docker-compose搭建的应用，删除也非常容易</p>
<h2 id="☁️反向代理（必须）"><a href="#☁️反向代理（必须）" class="headerlink" title="☁️反向代理（必须）"></a>☁️反向代理（必须）</h2><hr>
<h3 id="利用Nginx-Proxy-Manager"><a href="#利用Nginx-Proxy-Manager" class="headerlink" title="利用Nginx Proxy Manager"></a>利用Nginx Proxy Manager</h3><p>在添加反向代理之前，确保你已经完成了域名解析，不会的可以看这个：域名一枚，并做好解析到服务器上（<a href="../domain">域名购买、域名解析</a>）</p>
<p>之后，登陆Nginx Proxy Manager。（不会的看这个：安装Nginx Proxy Manager（<a href="../installNPM">相关教程</a>））</p>
<div class="note danger"><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>Nginx Proxy Manager（以下简称NPM）会用到 <mark class="label info">80</mark>、<mark class="label info">443</mark> 端口，所以本机不能占用（比如原来就有Nginx）</p>
</div>

<p>直接丢几张图：<br><img data-src="/readerdeploy/addproxy1.png" alt="addproxy1" title="addproxy1"><br><img data-src="/readerdeploy/addproxy2.png" alt="addproxy2" title="addproxy2"><br>注意填写对应的 <mark class="label info">域名</mark> 、 <mark class="label info">IP</mark> 和 <mark class="label info">端口</mark> ，按文章来的话，应该是 <mark class="label success">4396</mark></p>
<p>IP填写：</p>
<p>如果Nginx Proxy Manager和reader在同一台服务器上，可以在终端输入:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure>

<p>查看对应的Docker容器内部IP。</p>
<p>否则直接填 <mark class="label info">cryptgeon所在的服务器IP</mark> 就行。</p>
<hr>
<p>Source:<br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmxhb2RhLmRlL2FyY2hpdmVzL2RvY2tlci1jb21wb3NlLWluc3RhbGwtcmVhZGVy">【好玩儿的Docker项目】 10分钟搭建一个自己的网文阅读器 安卓的“阅读”APP网页版 附带书源！-咕咕鸽<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Book</category>
        <category>Reader</category>
        <category>Deploy</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>Z-Library 世界上最大的数字图书馆</title>
    <url>/zlibrary/</url>
    <content><![CDATA[<h1 id="📖Z-Library"><a href="#📖Z-Library" class="headerlink" title="📖Z-Library"></a>📖Z-Library</h1><hr>
<p>Z-Library（简称z-lib，前身为BookFinder）是一个影子图书馆和文件分享计划，用户可在此一网站上下载期刊文章以及各种类型的书籍》。</p>
<ul>
<li><p>官网地址：<br>❗<del><span class="exturl" data-url="aHR0cHM6Ly96aC56LWxpYi5vcmcv">zh.z-lib.org<i class="fa fa-external-link-alt"></i></span></del> <mark class="label danger">已经被端掉</mark></p>
<p>  目前解决方法是用<span class="exturl" data-url="aHR0cHM6Ly9zaW5nbGVsb2dpbi5zaXRlLw==">singlelogin.site<i class="fa fa-external-link-alt"></i></span>创建一个账号，之后Zlibrary会提供个人链接。</p>
<p>  更多消息加入Z-library的Telegram频道：<span class="exturl" data-url="aHR0cHM6Ly90Lm1lL3psaWJyYXJ5X29mZmljaWFs">t.me&#x2F;zlibrary_official<i class="fa fa-external-link-alt"></i></span>。</p>
</li>
</ul>
<span id="more"></span>

<hr>
<p>Authored by Brian</p>
]]></content>
      <categories>
        <category>Book</category>
        <category>Zlibrary</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
</search>
